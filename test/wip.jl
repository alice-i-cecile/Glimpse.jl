using GLider

testvista = Vista(interactive=true)
using GeometryTypes
using ColorTypes
testverts = Point3f0.([(-1.0,-1.0,-1.0),(-1.0,-1.0, 1.0),
    (-1.0, 1.0, 1.0),
    (1.0, 1.0,-1.0),
    (-1.0,-1.0,-1.0),
    (-1.0, 1.0,-1.0),
    (1.0,-1.0, 1.0),
    (-1.0,-1.0,-1.0),
    (1.0,-1.0,-1.0),
    (1.0, 1.0,-1.0),
    (1.0,-1.0,-1.0),
    (-1.0,-1.0,-1.0),
    (-1.0,-1.0,-1.0),
    (-1.0, 1.0, 1.0),
    (-1.0, 1.0,-1.0),
    (1.0,-1.0, 1.0),
    (-1.0,-1.0, 1.0),
    (-1.0,-1.0,-1.0),
    (-1.0, 1.0, 1.0),
    (-1.0,-1.0, 1.0),
    (1.0,-1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0,-1.0,-1.0),
    (1.0, 1.0,-1.0),
    (1.0,-1.0,-1.0),
    (1.0, 1.0, 1.0),
    (1.0,-1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0,-1.0),
    (-1.0, 1.0,-1.0),
    (1.0, 1.0, 1.0),
    (-1.0, 1.0,-1.0),
    (-1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (-1.0, 1.0, 1.0),
    (1.0,-1.0, 1.0)])
testcolors =Point3f0[
    [0.583,  0.771,  0.014],
    [0.609,  0.115,  0.436],
    [0.327,  0.483,  0.844],
    [0.822,  0.569,  0.201],
    [0.435,  0.602,  0.223],
    [0.310,  0.747,  0.185],
    [0.597,  0.770,  0.761],
    [0.559,  0.436,  0.730],
    [0.359,  0.583,  0.152],
    [0.483,  0.596,  0.789],
    [0.559,  0.861,  0.639],
    [0.195,  0.548,  0.859],
    [0.014,  0.184,  0.576],
    [0.771,  0.328,  0.970],
    [0.406,  0.615,  0.116],
    [0.676,  0.977,  0.133],
    [0.971,  0.572,  0.833],
    [0.140,  0.616,  0.489],
    [0.997,  0.513,  0.064],
    [0.945,  0.719,  0.592],
    [0.543,  0.021,  0.978],
    [0.279,  0.317,  0.505],
    [0.167,  0.620,  0.077],
    [0.347,  0.857,  0.137],
    [0.055,  0.953,  0.042],
    [0.714,  0.505,  0.345],
    [0.783,  0.290,  0.734],
    [0.722,  0.645,  0.174],
    [0.302,  0.455,  0.848],
    [0.225,  0.587,  0.040],
    [0.517,  0.713,  0.338],
    [0.053,  0.959,  0.120],
    [0.393,  0.621,  0.362],
    [0.673,  0.211,  0.457],
    [0.820,  0.883,  0.371],
    [0.982,  0.099,  0.879]]
testrenderable = Renderable{3}(1,:test, Dict{Symbol, Any}(:vertices => testverts, :colors => testcolors))
add!(testvista, testrenderable)




cube = HyperRectangle(Vec3f0(0.0f0,.0f0,0.0f0),Vec3f0(1.0f0,1.0f0,50f0))
cube_verts = decompose(Point3f0, cube)
cube_faces = Face.(reverse.(decompose(Face{3,Int32}, cube).-Int32(1)))

testcube = Renderable(1,:test, Dict(:vertices =>cube_verts, :color => [rand(RGB) for i = 1:length(cube_verts)],:faces=>cube_faces))
cube2 = HyperRectangle(Vec3f0(0.0f0,.0f0,-1.0f0),Vec3f0(1.0f0,1.0f0,50f0))
cube2_verts = decompose(Point3f0, cube2)
cube2_faces = decompose(Face{3,Int32}, cube2).-Int32(1)

testcube2 = Renderable(1,:test, Dict(:vertices =>cube2_verts, :color => [rand(RGB) for i = 1:length(cube2_verts)],:faces=>cube2_faces))
add!(testvista, testcube)
raise(testvista)
